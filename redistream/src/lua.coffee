export default "local log = function(...)\n  local li = {}\n  for _, v in ipairs({ ... }) do\n    table.insert(li, cjson.encode(v))\n  end\n  redis.log(redis.LOG_NOTICE, unpack(li))\nend\n\nlocal concat = function(li, push)\n  for i = 1, #push do\n    table.insert(li, push[i])\n  end\nend\n\n-- local strBin = function(str)\n--   local li = {}\n--   for i = 1, #str do\n--     li[i] = string.byte(str, i)\n--   end\n--   return li\n-- end\n\nlocal intBin = function(n)\n  local t = {}\n  while n > 0 do\n    local r = math.floor(math.fmod(n, 256))\n    table.insert(t, r)\n    n = (n - r) / 256\n  end\n  return t\nend\n\nlocal splitNum = function(str)\n  local pos = string.find(str, \"-\") -- 找到\"-\"的位置\n  local str1 = string.sub(str, 1, pos - 1) -- 截取前半段字符串\n  local str2 = string.sub(str, pos + 1) -- 截取后半段字符串\n  return { tonumber(str1), tonumber(str2) } -- 返回两个数字\nend\n\nlocal XPENDING = function(stream, group, idle, limit)\n  return redis.call(\"XPENDING\", stream, group, \"IDLE\", idle, \"-\", \"+\", limit)\nend\n\nlocal XCLAIM = function(stream, group, customer, min_idle, ...)\n  return redis.call(\"XCLAIM\", stream, group, customer, min_idle, ...)\nend\n\nlocal XINFO = function(stream, group)\n  return redis.call(\"XINFO\", \"CONSUMERS\", stream, group)\nend\n\nlocal XDELCONSUMER = function(stream, group, consumer)\n  return redis.call(\"XGROUP\", \"DELCONSUMER\", stream, group, consumer)\nend\n\nfunction xconsumerclean(keys, args)\n  local stream, group = unpack(keys)\n  local expire = tonumber(args[1])\n  for _, v in ipairs(XINFO(stream, group)) do\n    local v = v.map\n    if v.idle > expire then\n      XDELCONSUMER(stream, group, v.name)\n    end\n  end\nend\n\nfunction xpendclaim(keys, args)\n  if #keys ~= 3 then\n    return\n  end\n  local stream, group, customer = unpack(keys)\n  local idle, limit = unpack(args)\n  idle = tonumber(idle)\n  local li = XPENDING(stream, group, idle, limit)\n  if #li > 0 then\n    local id_li = {}\n    local id_retry = {}\n    for _, v in ipairs(li) do\n      local id = v[1]\n      table.insert(id_li, id)\n      id_retry[id] = v[4]\n    end\n    local bin = {}\n    local buf = \"\"\n    for _, v in ipairs(XCLAIM(stream, group, customer, idle, unpack(id_li))) do\n      local id, msg = unpack(v)\n      table.insert(bin, id_retry[id])\n      id = splitNum(id)\n      concat(bin, id)\n      for _, v in ipairs(msg) do\n        table.insert(bin, #v)\n        -- log(\">\", strBin(v))\n        buf = buf .. v\n      end\n    end\n    bin = cmsgpack.pack(bin)\n    local r = intBin(#bin)\n    table.insert(r, 1, #r)\n    return string.char(unpack(r)) .. bin .. buf\n  else\n    return\n  end\nend\n"
